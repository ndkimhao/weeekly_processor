                               #      | SECTION_BEGIN_boot:
60 a0 e0 00 20                 # d000 |   mov SP, 0x2000
5c e0 0a d0                    # d005 |   call $fn_start
d8                             # d009 |   halt
                               #      | SECTION_END_boot:
                               #      | 
                               #      | fn_start:
60 20 e0 fd 00                 # d00a |   mov A, 0xfd
60 40 00                       # d00f |   mov B, 0
54 e0 e0 1c 00 30 00 30 02     # d012 |   mmap 0x3000, 0x3000, 0x2
60 20 e0 8c d1                 # d01b |   mov A, $const_data_1
5c e0 4a d0                    # d020 |   call $fn_send_data
60 20 ff                       # d024 |   mov A, H
62 e0 1c 04 01 01              # d027 |   mov [$var_led_status], 0x1
63 e0 e0 0a 30 04 01           # d02d |   mov [0x300a], [$var_led_status]
                               #      | _B_fn_start_1:
5c e0 8a d0                    # d034 |   call $fn_recv_command
5c e0 ef d0                    # d038 |   call $fn_led_activity
60 20 e0 00 00                 # d03c |   mov A, $var_uart_recv_buf
5c e0 fb d0                    # d041 |   call $fn_parse_command
58 e0 34 d0                    # d045 |   jmp $_B_fn_start_1
                               #      | _E_fn_start_1:
dc                             # d049 |   ret
                               #      | end_fn_start:
                               #      | 
                               #      | fn_send_data:
e0 20                          # d04a |   push A
e0 40                          # d04c |   push B
e0 60                          # d04e |   push C
60 60 1c 11                    # d050 |   mov C, 0x11
                               #      | _B_fn_send_data_1:
61 40 20                       # d054 |   mov B, [A]
2c 40 e0 ff 00                 # d057 |   and B, 0xff
e8 40 00 e0 83 d0              # d05c |   jeq B, 0, $_E_fn_send_data_1
                               #      | _B_fn_send_data_2:
f0 60 1c e0 10 76 d0           # d062 |   jlt C, 0x10, $_E_fn_send_data_2
61 60 e0 04 30                 # d069 |   mov C, [0x3004]
2c 60 1c 3f                    # d06e |   and C, 0x3f
58 e0 62 d0                    # d072 |   jmp $_B_fn_send_data_2
                               #      | _E_fn_send_data_2:
62 e0 40 00 30                 # d076 |   mov [0x3000], B
44 20                          # d07b |   inc A
44 60                          # d07d |   inc C
58 e0 54 d0                    # d07f |   jmp $_B_fn_send_data_1
                               #      | _E_fn_send_data_1:
e4 60                          # d083 |   pop C
e4 40                          # d085 |   pop B
e4 20                          # d087 |   pop A
dc                             # d089 |   ret
                               #      | end_fn_send_data:
                               #      | 
                               #      | fn_recv_command:
e0 20                          # d08a |   push A
e0 60                          # d08c |   push C
e0 80                          # d08e |   push D
e0 fe                          # d090 |   push G
60 20 00                       # d092 |   mov A, 0
                               #      | _B_fn_recv_command_1:
                               #      | _B_fn_recv_command_2:
f0 20 1c e0 7f af d0           # d095 |   jlt A, 0x7f, $_E_fn_recv_command_2
60 fe 20                       # d09c |   mov G, A
60 20 e0 93 d1                 # d09f |   mov A, $const_data_2
5c e0 4a d0                    # d0a4 |   call $fn_send_data
60 20 fe                       # d0a8 |   mov A, G
58 e0 e3 d0                    # d0ab |   jmp $_E_fn_recv_command_1
                               #      | _E_fn_recv_command_2:
61 60 e0 02 30                 # d0af |   mov C, [0x3002]
ac 80 60 e0 00 80              # d0b4 |   and D, C, 0x8000
e8 80 00 e0 95 d0              # d0ba |   jeq D, 0, $_B_fn_recv_command_1
2c 60 e0 ff 00                 # d0c0 |   and C, 0xff
62 e0 60 00 30                 # d0c5 |   mov [0x3000], C
e8 60 1c e0 0a e3 d0           # d0ca |   jeq C, 0xa, $_E_fn_recv_command_1
e8 60 1c e0 0d 95 d0           # d0d1 |   jeq C, 0xd, $_B_fn_recv_command_1
62 e4 60 00 00                 # d0d8 |   mov [$var_uart_recv_buf + A], C
44 20                          # d0dd |   inc A
58 e0 95 d0                    # d0df |   jmp $_B_fn_recv_command_1
                               #      | _E_fn_recv_command_1:
60 ff 20                       # d0e3 |   mov H, A
e4 fe                          # d0e6 |   pop G
e4 80                          # d0e8 |   pop D
e4 60                          # d0ea |   pop C
e4 20                          # d0ec |   pop A
dc                             # d0ee |   ret
                               #      | end_fn_recv_command:
                               #      | 
                               #      | fn_led_activity:
46 e0 04 01                    # d0ef |   inc [$var_led_status]
63 e0 e0 0a 30 04 01           # d0f3 |   mov [0x300a], [$var_led_status]
dc                             # d0fa |   ret
                               #      | end_fn_led_activity:
                               #      | 
                               #      | fn_parse_command:
e0 40                          # d0fb |   push B
e0 60                          # d0fd |   push C
5c e0 1e d1                    # d0ff |   call $fn_split_command
60 40 ff                       # d103 |   mov B, H
60 60 e0 9d d1                 # d106 |   mov C, $const_data_3
5c e0 3c d1                    # d10b |   call $fn_string_cmp
                               #      | _B_fn_parse_command_1:
e8 ff 00 e0 19 d1              # d10f |   jeq H, 0, $_E_fn_parse_command_1
5c e0 7e d1                    # d115 |   call $fn_handle_ping
                               #      | _E_fn_parse_command_1:
e4 60                          # d119 |   pop C
e4 40                          # d11b |   pop B
dc                             # d11d |   ret
                               #      | end_fn_parse_command:
                               #      | 
                               #      | fn_split_command:
e0 60                          # d11e |   push C
60 ff 20                       # d120 |   mov H, A
                               #      | _B_fn_split_command_1:
65 60 ff                       # d123 |   bmov C, [H]
e8 60 1c e0 20 39 d1           # d126 |   jeq C, 0x20, $_E_fn_split_command_1
e8 60 00 e0 39 d1              # d12d |   jeq C, 0, $_E_fn_split_command_1
44 ff                          # d133 |   inc H
58 e0 23 d1                    # d135 |   jmp $_B_fn_split_command_1
                               #      | _E_fn_split_command_1:
e4 60                          # d139 |   pop C
dc                             # d13b |   ret
                               #      | end_fn_split_command:
                               #      | 
                               #      | fn_string_cmp:
e0 20                          # d13c |   push A
e0 40                          # d13e |   push B
e0 60                          # d140 |   push C
e0 fd                          # d142 |   push F
e0 fe                          # d144 |   push G
60 ff 00                       # d146 |   mov H, 0
                               #      | _B_fn_string_cmp_3:
65 fd 20                       # d149 |   bmov F, [A]
65 fe 60                       # d14c |   bmov G, [C]
e8 20 40 e0 69 d1              # d14f |   jeq A, B, $_L_fn_string_cmp_2
e8 fe 00 e0 73 d1              # d155 |   jeq G, 0, $_L_fn_string_cmp_1
ec fd fe e0 73 d1              # d15b |   jne F, G, $_L_fn_string_cmp_1
44 20                          # d161 |   inc A
44 60                          # d163 |   inc C
58 e0 49 d1                    # d165 |   jmp $_B_fn_string_cmp_3
                               #      | _E_fn_string_cmp_3:
                               #      | _L_fn_string_cmp_2:
ec fe 00 e0 73 d1              # d169 |   jne G, 0, $_L_fn_string_cmp_1
60 ff 1c 01                    # d16f |   mov H, 0x1
                               #      | _L_fn_string_cmp_1:
e4 fe                          # d173 |   pop G
e4 fd                          # d175 |   pop F
e4 60                          # d177 |   pop C
e4 40                          # d179 |   pop B
e4 20                          # d17b |   pop A
dc                             # d17d |   ret
                               #      | end_fn_string_cmp:
                               #      | 
                               #      | fn_handle_ping:
e0 20                          # d17e |   push A
60 20 e0 a2 d1                 # d180 |   mov A, $const_data_4
5c e0 4a d0                    # d185 |   call $fn_send_data
e4 20                          # d189 |   pop A
dc                             # d18b |   ret
                               #      | end_fn_handle_ping:
                               #      | 
                               #      | SECTION_BEGIN_const_data:
                               #      | const_data_1:
52 45 41 44 59 0a 00           # d18c |   .data str:"READY\n"
                               #      | const_data_2:
4f 56 45 52 46 4c 4f 57 0a 00  # d193 |   .data str:"OVERFLOW\n"
                               #      | const_data_3:
50 49 4e 47 00                 # d19d |   .data str:"PING"
                               #      | const_data_4:
50 4f 4e 47 0a 00              # d1a2 |   .data str:"PONG\n"
                               #      | SECTION_END_const_data:
                               #      | 
                               #      | .offset 0x0000
                               #      | SECTION_BEGIN_static_data:
                               #      | var_uart_recv_buf:
                               #    0 |   .bss size:130
                               #      | var_uart_send_buf:
                               #   82 |   .bss size:130
                               #      | var_led_status:
                               #  104 |   .bss size:2
                               #      | SECTION_END_static_data:
                               #      | 
